/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IFuroVestingInterface extends ethers.utils.Interface {
  functions: {
    "createVesting(address,address,uint32,uint32,uint32,uint32,uint128,uint128,bool)": FunctionFragment;
    "setBentoBoxApproval(address,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "stopVesting(uint256,bool)": FunctionFragment;
    "updateOwner(uint256,address)": FunctionFragment;
    "vestBalance(uint256)": FunctionFragment;
    "withdraw(uint256,bytes,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createVesting",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBentoBoxApproval",
    values: [string, boolean, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stopVesting",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BytesLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "createVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBentoBoxApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CancelVesting(uint256,uint256,uint256,address,bool)": EventFragment;
    "CreateVesting(uint256,address,address,address,uint32,uint32,uint32,uint32,uint128,uint128,bool)": EventFragment;
    "LogUpdateOwner(uint256,address)": EventFragment;
    "Withdraw(uint256,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelVesting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVesting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdateOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class IFuroVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFuroVestingInterface;

  functions: {
    createVesting(
      token: string,
      recipient: string,
      start: BigNumberish,
      cliffDuration: BigNumberish,
      stepDuration: BigNumberish,
      steps: BigNumberish,
      cliffAmount: BigNumberish,
      stepAmount: BigNumberish,
      fromBentoBox: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBentoBoxApproval(
      user: string,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopVesting(
      vestId: BigNumberish,
      toBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      vestId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestBalance(
      vestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      vestId: BigNumberish,
      taskData: BytesLike,
      toBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createVesting(
    token: string,
    recipient: string,
    start: BigNumberish,
    cliffDuration: BigNumberish,
    stepDuration: BigNumberish,
    steps: BigNumberish,
    cliffAmount: BigNumberish,
    stepAmount: BigNumberish,
    fromBentoBox: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBentoBoxApproval(
    user: string,
    approved: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopVesting(
    vestId: BigNumberish,
    toBentoBox: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    vestId: BigNumberish,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestBalance(
    vestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    vestId: BigNumberish,
    taskData: BytesLike,
    toBentoBox: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createVesting(
      token: string,
      recipient: string,
      start: BigNumberish,
      cliffDuration: BigNumberish,
      stepDuration: BigNumberish,
      steps: BigNumberish,
      cliffAmount: BigNumberish,
      stepAmount: BigNumberish,
      fromBentoBox: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { depositedShares: BigNumber; vestId: BigNumber }
    >;

    setBentoBoxApproval(
      user: string,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stopVesting(
      vestId: BigNumberish,
      toBentoBox: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(
      vestId: BigNumberish,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vestBalance(
      vestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      vestId: BigNumberish,
      taskData: BytesLike,
      toBentoBox: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CancelVesting(
      vestId?: BigNumberish | null,
      ownerAmount?: BigNumberish | null,
      recipientAmount?: BigNumberish | null,
      token?: null,
      toBentoBox?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, boolean],
      {
        vestId: BigNumber;
        ownerAmount: BigNumber;
        recipientAmount: BigNumber;
        token: string;
        toBentoBox: boolean;
      }
    >;

    CreateVesting(
      vestId?: BigNumberish | null,
      token?: null,
      owner?: string | null,
      recipient?: string | null,
      start?: null,
      cliffDuration?: null,
      stepDuration?: null,
      steps?: null,
      cliffAmount?: null,
      stepAmount?: null,
      fromBentoBox?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        boolean
      ],
      {
        vestId: BigNumber;
        token: string;
        owner: string;
        recipient: string;
        start: number;
        cliffDuration: number;
        stepDuration: number;
        steps: number;
        cliffAmount: BigNumber;
        stepAmount: BigNumber;
        fromBentoBox: boolean;
      }
    >;

    LogUpdateOwner(
      vestId?: BigNumberish | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { vestId: BigNumber; newOwner: string }
    >;

    Withdraw(
      vestId?: BigNumberish | null,
      token?: string | null,
      amount?: BigNumberish | null,
      toBentoBox?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, boolean],
      {
        vestId: BigNumber;
        token: string;
        amount: BigNumber;
        toBentoBox: boolean;
      }
    >;
  };

  estimateGas: {
    createVesting(
      token: string,
      recipient: string,
      start: BigNumberish,
      cliffDuration: BigNumberish,
      stepDuration: BigNumberish,
      steps: BigNumberish,
      cliffAmount: BigNumberish,
      stepAmount: BigNumberish,
      fromBentoBox: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBentoBoxApproval(
      user: string,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopVesting(
      vestId: BigNumberish,
      toBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOwner(
      vestId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestBalance(
      vestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      vestId: BigNumberish,
      taskData: BytesLike,
      toBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createVesting(
      token: string,
      recipient: string,
      start: BigNumberish,
      cliffDuration: BigNumberish,
      stepDuration: BigNumberish,
      steps: BigNumberish,
      cliffAmount: BigNumberish,
      stepAmount: BigNumberish,
      fromBentoBox: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBentoBoxApproval(
      user: string,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopVesting(
      vestId: BigNumberish,
      toBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      vestId: BigNumberish,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestBalance(
      vestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      vestId: BigNumberish,
      taskData: BytesLike,
      toBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
