/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IFuroStreamInterface extends ethers.utils.Interface {
  functions: {
    "cancelStream(uint256,bool)": FunctionFragment;
    "createStream(address,address,uint64,uint64,uint256,bool)": FunctionFragment;
    "getStream(uint256)": FunctionFragment;
    "setBentoBoxApproval(address,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "streamBalanceOf(uint256)": FunctionFragment;
    "updateSender(uint256,address)": FunctionFragment;
    "updateStream(uint256,uint128,uint64,bool)": FunctionFragment;
    "withdrawFromStream(uint256,uint256,address,bool,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelStream",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createStream",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBentoBoxApproval",
    values: [string, boolean, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "streamBalanceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSender",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStream",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromStream",
    values: [BigNumberish, BigNumberish, string, boolean, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStream", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBentoBoxApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "streamBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromStream",
    data: BytesLike
  ): Result;

  events: {
    "CancelStream(uint256,uint256,uint256,address,bool)": EventFragment;
    "CreateStream(uint256,address,address,address,uint256,uint256,uint256,bool)": EventFragment;
    "UpdateStream(uint256,uint128,uint64,bool)": EventFragment;
    "Withdraw(uint256,uint256,address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelStream"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateStream"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateStream"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class IFuroStream extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFuroStreamInterface;

  functions: {
    cancelStream(
      streamId: BigNumberish,
      toBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createStream(
      recipient: string,
      token: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      amount: BigNumberish,
      fromBento: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          sender: string;
          token: string;
          depositedShares: BigNumber;
          withdrawnShares: BigNumber;
          startTime: BigNumber;
          endTime: BigNumber;
        }
      ]
    >;

    setBentoBoxApproval(
      user: string,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    streamBalanceOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderBalance: BigNumber;
        recipientBalance: BigNumber;
      }
    >;

    updateSender(
      streamId: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStream(
      streamId: BigNumberish,
      topUpAmount: BigNumberish,
      extendTime: BigNumberish,
      fromBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromStream(
      streamId: BigNumberish,
      sharesToWithdraw: BigNumberish,
      withdrawTo: string,
      toBentoBox: boolean,
      taskData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelStream(
    streamId: BigNumberish,
    toBentoBox: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createStream(
    recipient: string,
    token: string,
    startTime: BigNumberish,
    endTime: BigNumberish,
    amount: BigNumberish,
    fromBento: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStream(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      sender: string;
      token: string;
      depositedShares: BigNumber;
      withdrawnShares: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
    }
  >;

  setBentoBoxApproval(
    user: string,
    approved: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  streamBalanceOf(
    streamId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      senderBalance: BigNumber;
      recipientBalance: BigNumber;
    }
  >;

  updateSender(
    streamId: BigNumberish,
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStream(
    streamId: BigNumberish,
    topUpAmount: BigNumberish,
    extendTime: BigNumberish,
    fromBentoBox: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromStream(
    streamId: BigNumberish,
    sharesToWithdraw: BigNumberish,
    withdrawTo: string,
    toBentoBox: boolean,
    taskData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelStream(
      streamId: BigNumberish,
      toBentoBox: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderBalance: BigNumber;
        recipientBalance: BigNumber;
      }
    >;

    createStream(
      recipient: string,
      token: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      amount: BigNumberish,
      fromBento: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        streamId: BigNumber;
        depositedShares: BigNumber;
      }
    >;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        sender: string;
        token: string;
        depositedShares: BigNumber;
        withdrawnShares: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    setBentoBoxApproval(
      user: string,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    streamBalanceOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderBalance: BigNumber;
        recipientBalance: BigNumber;
      }
    >;

    updateSender(
      streamId: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStream(
      streamId: BigNumberish,
      topUpAmount: BigNumberish,
      extendTime: BigNumberish,
      fromBentoBox: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFromStream(
      streamId: BigNumberish,
      sharesToWithdraw: BigNumberish,
      withdrawTo: string,
      toBentoBox: boolean,
      taskData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { recipientBalance: BigNumber; to: string }
    >;
  };

  filters: {
    CancelStream(
      streamId?: BigNumberish | null,
      senderBalance?: BigNumberish | null,
      recipientBalance?: BigNumberish | null,
      token?: null,
      toBentoBox?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, boolean],
      {
        streamId: BigNumber;
        senderBalance: BigNumber;
        recipientBalance: BigNumber;
        token: string;
        toBentoBox: boolean;
      }
    >;

    CreateStream(
      streamId?: BigNumberish | null,
      sender?: string | null,
      recipient?: string | null,
      token?: null,
      amount?: null,
      startTime?: null,
      endTime?: null,
      fromBentoBox?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ],
      {
        streamId: BigNumber;
        sender: string;
        recipient: string;
        token: string;
        amount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        fromBentoBox: boolean;
      }
    >;

    UpdateStream(
      streamId?: BigNumberish | null,
      topUpAmount?: BigNumberish | null,
      extendTime?: BigNumberish | null,
      fromBentoBox?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, boolean],
      {
        streamId: BigNumber;
        topUpAmount: BigNumber;
        extendTime: BigNumber;
        fromBentoBox: boolean;
      }
    >;

    Withdraw(
      streamId?: BigNumberish | null,
      sharesToWithdraw?: BigNumberish | null,
      withdrawTo?: string | null,
      token?: null,
      toBentoBox?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string, boolean],
      {
        streamId: BigNumber;
        sharesToWithdraw: BigNumber;
        withdrawTo: string;
        token: string;
        toBentoBox: boolean;
      }
    >;
  };

  estimateGas: {
    cancelStream(
      streamId: BigNumberish,
      toBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createStream(
      recipient: string,
      token: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      amount: BigNumberish,
      fromBento: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBentoBoxApproval(
      user: string,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    streamBalanceOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateSender(
      streamId: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStream(
      streamId: BigNumberish,
      topUpAmount: BigNumberish,
      extendTime: BigNumberish,
      fromBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromStream(
      streamId: BigNumberish,
      sharesToWithdraw: BigNumberish,
      withdrawTo: string,
      toBentoBox: boolean,
      taskData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelStream(
      streamId: BigNumberish,
      toBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createStream(
      recipient: string,
      token: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      amount: BigNumberish,
      fromBento: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStream(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBentoBoxApproval(
      user: string,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    streamBalanceOf(
      streamId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateSender(
      streamId: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStream(
      streamId: BigNumberish,
      topUpAmount: BigNumberish,
      extendTime: BigNumberish,
      fromBentoBox: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromStream(
      streamId: BigNumberish,
      sharesToWithdraw: BigNumberish,
      withdrawTo: string,
      toBentoBox: boolean,
      taskData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
